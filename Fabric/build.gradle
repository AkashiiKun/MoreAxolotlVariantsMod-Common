plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
    id "org.quiltmc.quilt-mappings-on-loom" version "4.2.+" // Quilt Mappings, for parameters and javadoc. Also hashed mojmap.
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${quilt_mappings_version}:v2"))
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings() {
            setNameSyntheticMembers(false)
        }
    }

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    modImplementation "maven.modrinth:lambdynamiclights:${project.lambdynamiclights_version}"
    modImplementation "dev.lambdaurora:spruceui:${project.spruceui_version}"
    modImplementation("maven.modrinth:modmenu:${project.modmenu_version}") {
        transitive = false
    }

    implementation project(":Common")
}

loom {
    if(file("src/main/resources/${project.mod_id}.accesswidener").exists()) {
        accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
    }

    mixin {
        defaultRefmapName = "${project.mod_id}.refmap.json"
    }

    sourceSets {
        main {
            resources {
                srcDir("src/generated/resources")
                exclude("src/generated/resources/.cache")
            }
        }
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        datagen {
            client()
            setConfigName("Fabric Datagen")
            ideConfigGenerated(true)
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"
            property "${project.maven_group}.${project.mod_id}.existingData", file("src/main/resources").absolutePath
            runDir "build/datagen"
        }
    }
}


processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching("fabric.mod.json") {
        expand(["mod_id": project.mod_id,
                "mod_version": project.mod_version,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "mod_author": project.mod_author,
                "license": project.mod_license])
    }

    filesMatching('*.mixins.json') {
        expand "refmap_target": project.mod_id
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.mod_name}" }
    }
}