plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id 'org.quiltmc.gradle.licenser' version '2.+' apply false
    id "io.github.pacifistmc.forgix" version "1.2.6"
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

allprojects {
    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: "maven-publish"
}

architectury {
    minecraft = project.minecraft
}

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE') == 'false'
ext.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : 'custom'

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "architectury-plugin"
    apply plugin: "org.quiltmc.gradle.licenser"

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    def targetJavaVersion = 17

    archivesBaseName = "${rootProject.mod_id}-${project.name.toLowerCase()}"
    version = "${rootProject.mod_version}-mc${rootProject.minecraft}" + (dev && buildnumber != 'custom' ? "+${buildnumber}" : '')
    group = rootProject.maven_group

    repositories {
        flatDir{
            dirs "$rootProject.projectDir/libs"
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft}"
        mappings loom.layered() {
            officialMojangMappings()
        }

        modImplementation "io.github.akashiikun:mavapi:${rootProject.mavapi_version}-mc${rootProject.minecraft}"
    }

    processResources {
        inputs.property "mod_id", rootProject.mod_id
        inputs.property "mod_version", rootProject.mod_version
        inputs.property "mod_name", rootProject.mod_name
        inputs.property "mod_description", rootProject.mod_description
        inputs.property "mod_author", rootProject.mod_author
        inputs.property "discord", rootProject.discord
        inputs.property "source", rootProject.source
        inputs.property "maven_group", rootProject.maven_group
        inputs.property "license", rootProject.mod_license
        inputs.property "minecraft", rootProject.minecraft
        inputs.property "fabric_loader", rootProject.fabric_loader
        inputs.property "fabric_api", rootProject.fabric_api
        inputs.property "forge", rootProject.forge_compat

        filesMatching(["*.mod.json", "META-INF/mods.toml"]) {
            expand(["mod_id"         : project.mod_id,
                    "mod_version"    : project.mod_version,
                    "mod_name"       : project.mod_name,
                    "mod_description": project.mod_description,
                    "mod_author"     : project.mod_author,
                    "discord"  : project.discord,
                    "source"  : project.source,
                    "license"        : project.mod_license,
                    "maven_group"    : project.maven_group,
                    "minecraft"      : project.minecraft,
                    "fabric_loader"  : project.fabric_loader,
                    "fabric_api"  : project.fabric_api,
                    "forge"  : project.forge_compat])
        }

        filesMatching('pack.mcmeta') {
            expand "mod_name": rootProject.mod_name
        }
    }

    license {
        rule file(getRootProject().file("HEADER"))
        include '**/*.java'
    }

    tasks.withType(JavaCompile) {
        options.encoding('UTF-8')
	    options.incremental(true)
	    options.deprecation(true)
	    options.release.set(targetJavaVersion)
    }

    java {
        sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)
        withSourcesJar()
    }

    build.dependsOn applyLicenses
    applyLicenses.dependsOn processResources
    build.finalizedBy mergeJars
}

forgix {
    group = project.maven_group // This is the common group of the mod which by default in Architectury Template it's defined as "maven_group" in your gradle.properties. If this property is not defined then by default it'll fetch the group from the maven_group property in your gradle.properties
    mergedJarName = "${project.mod_id}-${project.mod_version}-mc${project.minecraft}" + (dev && buildnumber != 'custom' ? "+${buildnumber}" : '' + ".jar") // This is the name of the merged jar. If this property is not defined then by default it'll fetch the "archives_base_name" property with the "mod_version" property in your gradle.properties.
    outputDir = "build/libs" // This is the output directory of the merged jar from the root project. If this property is not defined then by default it's set to "Merged".

    forge {
        projectName = "forge" // This is the name of the forge project. If this property is not defined then by default it'll set to "forge" since that's the name the Architectury Template uses.
        jarLocation = "build/libs/${project.mod_id}-forge-${project.mod_version}-mc${project.minecraft}" + (dev && buildnumber != 'custom' ? "+${buildnumber}" : '') + ".jar" // This is the location of the forge jar from the forge project. If this property is not defined then by default it fetches the jar with the shortest name.
    }
    fabric {
        projectName = "fabric" // This is the name of the fabric project. If this property is not defined then by default it'll set to "fabric" since that's the name the Architectury Template uses.
        jarLocation = "build/libs/${project.mod_id}-fabric-${project.mod_version}-mc${project.minecraft}" + (dev && buildnumber != 'custom' ? "+${buildnumber}" : '') + ".jar" // This is the location of the fabric jar from the fabric project. If this property is not defined then by default it fetches the jar with the shortest name.
    }
}

def finalJar = artifacts.add("archives", layout.buildDirectory.file("libs/${project.mod_id}-${project.mod_version}-mc${project.minecraft}" + (dev && buildnumber != 'custom' ? "+${buildnumber}" : '' + ".jar")))

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = project.mod_id
            artifact finalJar
        }
    }
    repositories {
    }
}

mergeJars.mustRunAfter build
publishToMavenLocal.mustRunAfter mergeJars
assemble.finalizedBy(mergeJars)